name: Builds and Tests

on: push

jobs:
  libwasmvm_sanity:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: cargocache-v2-libwasmvm_sanity-rust:1.60.0-${{ hashFiles('Cargo.lock') }}
      - name: Install shellcheck
        run: sudo apt install shellcheck
      - name: Show version information
        run: rustc --version; cargo --version; rustup --version
      - name: Add Rust components
        run: rustup component add clippy rustfmt
      - name: Check formatting
        working-directory: ./libwasmvm
        run: cargo fmt -- --check
      - name: Run linter
        working-directory: ./libwasmvm
        run: cargo clippy -- -D warnings
      - name: Run unit tests
        working-directory: ./libwasmvm
        run: cargo test
      - name: Build docs
        working-directory: ./libwasmvm
        run: cargo doc --no-deps
      - name: Test docs
        working-directory: ./libwasmvm
        run: |
            sed -i  '/^crate-type = \["cdylib"\]/d' Cargo.toml
            cargo test --doc
      - name: Run shellcheck
        run: ./devtools/check_shellscript_lint.sh

  format-go:
    runs-on: ubuntu-latest
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        id: go
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check Go formatting
        run: |
            [ "$(gofmt -l .)" = "" ] || (gofmt -d . && exit 1)

  tidy-go:
    runs-on: ubuntu-latest
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        id: go
      - name: CHeckout
        uses: actions/checkout@v2
      - name: Check go mod tidy
        # Use --check or --exit-code when available (Go 1.19?)
        # https://github.com/golang/go/issues/27005
        run: |
            go mod tidy
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi

  format-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        id: go
      - name: Install shfmt
        run: GO111MODULE=on go install mvdan.cc/sh/v3/cmd/shfmt@v3.4.0
      - name: Run shfmt
        run: shfmt -d .

  lint-scripts:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: |
            sudo apt update
            sudo apt install -y git shellcheck
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run shellcheck
        run: ./devtools/check_shellscript_lint.sh

  test_internal_shared_lib:
    runs-on: ubuntu-latest
    env:
      GORACE: "halt_on_error=1"
      BUILD_VERSION: $(echo $GITHUB_SHA | cut -c 1-10)
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        id: go
      - name: Checkout
        uses: actions/checkout@v2
      - name: Go integration tests
        run: make test
      - name: Go tests with cgo and race condition safety checks
        run: make test-safety
      - name: Make build-go
        run: make build-go

  build_shared_library:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          target: x86_64-unknown-linux-gnu
          profile: minimal
          override: true
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: cargocache-v2-build_shared_library-rust:1.60.0-${{ hashFiles('Cargo.lock') }}
      - name: Show version information
        run: rustc --version; cargo --version; rustup --version
      - name: Create release build of libwasmvm
        run: make build-rust
      - name: Upload libwasmvm
        uses: actions/upload-artifact@v2
        with:
          name: libwasmvm
          path: ./internal/api/libwasmvm.x86_64.so

  test_shared_lib:
    needs: build_shared_library
    runs-on: ubuntu-latest
    env:
      GORACE: "halt_on_error=1"
      BUILD_VERSION: $(echo $GITHUB_SHA | cut -c 1-10)
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        id: go
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download libwasmvm
        uses: actions/download-artifact@v2
        with:
          name: libwasmvm
          path: /tmp/builds
      - name: Copy libwasmvm
        run: cp /tmp/builds/libwasmvm.x86_64.so ./internal/api
      - name: Go integration tests
        run: make test
      - name: Go tests with cgo and race condition safety checks
        run: make test-safety
      - name: Make build-go
        run: make build-go

  test_static_lib:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare docker image
        run: cd builders && make docker-image-alpine
      - name: Build static library and test
        run: make test-alpine

  deploy_to_git:
    # needs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # - name: Create cache directory
      #   run: |
      #     mkdir -p /tmp/.buildx-cache
      #     mkdir -p ${{ env.CACHE_DIR }}
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-1
          restore-keys: |
            ${{ runner.os }}-buildx-  

      # - name: Prepare
      #   id: prep
      #   run: |
      #     HASH_GHE=${{ github.sha }}
      #     VARIANT=$(TZ=UTC-9 date '+%Y%m')${HASH_GHE:0:7}
      #     NAME_TAR="${VARIANT}.tar"
      #     CACHE_FILE=${{ env.CACHE_DIR }}"/${NAME_TAR}"
      #     echo "CACHE_FILE=${CACHE_FILE}" >> $GITHUB_OUTPUT
      - name: Debug build results
        run: ls -l ./internal/api
      - name: cd
        run: cd ./builders
      - name: build docker
        uses: docker/build-push-action@v2
        with:
          context: ../
          file: ./Dockerfile.centos7
          tags: finschia/wasmvm-builder-centos7:${{ github.sha }}-1
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          load: true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save docker image
        run: cd builders && make docker-images
      - name: debug
        run: docker image ls
      - name: Build shared library for Linux
        run: make release-build-linux
      # - name: Build shared library for macOS
      #   run: make release-build-macos
      # Shared libraries for Windows (.dll) currently do not work (https://github.com/CosmWasm/wasmvm/issues/389)
      # and .dll builds are not deterministic.
      # Deactivating this step to avoid polluting the git hostory.
      # - name: Build shared library for Windows
      #   run: make release-build-windows
      - name: Collect artifacts
        run: |
          mkdir artifacts
          cp ./internal/api/libwasmvm.x86_64.so ./artifacts/libwasmvm.x86_64.so
          cp ./internal/api/libwasmvm.aarch64.so ./artifacts/libwasmvm.aarch64.so
      #cp ./internal/api/libwasmvm.dylib ./artifacts/libwasmvm.dylib
      # - name: Create checksums
      #   working-directory: ./artifacts
      #   run: sha256sum * > checksums.txt && cat checksums.txt
      - name: Debug build results
        run: ls -l ./internal/api

      - name: Check-in and push new libraries
        run: |
          git config user.email "wasmvm@finschia.com"
          git config user.name "Deploy Bot"
          git status
          git add ./internal/api

          echo "Check"
          git status
          git commit --allow-empty -m '[skip ci] Built release libraries'
          git push origin $GITHUB_REF
