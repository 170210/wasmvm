name: Builds and Tests

on: push

jobs:
  deploy_to_git:
    # needs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      
      # - name: Create cache directory
      #   run: |
      #     mkdir -p /tmp/.buildx-cache
      #     mkdir -p ${{ env.CACHE_DIR }}
      
      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-  

      # - name: Prepare
      #   id: prep
      #   run: |
      #     HASH_GHE=${{ github.sha }}
      #     VARIANT=$(TZ=UTC-9 date '+%Y%m')${HASH_GHE:0:7}
      #     NAME_TAR="${VARIANT}.tar"
      #     CACHE_FILE=${{ env.CACHE_DIR }}"/${NAME_TAR}"
      #     echo "CACHE_FILE=${CACHE_FILE}" >> $GITHUB_OUTPUT
      - name: Debug build results
        run: ls -l ./internal/api
      - name: Build shared library for macOS
        run: docker build --pull . --no-cache -f ./builders/Dockerfile.centos7
      # - name: build docker
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./builders/Dockerfile.centos7
      #     tags: finschia/wasmvm-builder-centos7:${{ github.sha }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          # load: true
          # push: true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save docker image
        run: cd builders && make docker-images
      - name: debug
        run: docker image ls
      - name: Build shared library for Linux
        run: make release-build-linux
      # - name: Build shared library for macOS
      #   run: make release-build-macos
      # Shared libraries for Windows (.dll) currently do not work (https://github.com/CosmWasm/wasmvm/issues/389)
      # and .dll builds are not deterministic.
      # Deactivating this step to avoid polluting the git hostory.
      # - name: Build shared library for Windows
      #   run: make release-build-windows
      - name: Collect artifacts
        run: |
          mkdir artifacts
          cp ./internal/api/libwasmvm.x86_64.so ./artifacts/libwasmvm.x86_64.so
          cp ./internal/api/libwasmvm.aarch64.so ./artifacts/libwasmvm.aarch64.so
      #cp ./internal/api/libwasmvm.dylib ./artifacts/libwasmvm.dylib
      # - name: Create checksums
      #   working-directory: ./artifacts
      #   run: sha256sum * > checksums.txt && cat checksums.txt
      - name: Debug build results
        run: ls -l ./internal/api

      - name: Check-in and push new libraries
        run: |
          git config user.email "wasmvm@finschia.com"
          git config user.name "Deploy Bot"
          git status
          git add ./internal/api

          echo "Check"
          git status
          git commit --allow-empty -m '[skip ci] Built release libraries'
          git push origin $GITHUB_REF
